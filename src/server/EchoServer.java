package server;// This file contains material supporting section 3.7 of the textbook:// "Object Oriented Software Engineering" and is issued under the open-source// license found at www.lloseng.comimport java.io.*;import java.util.Observable;import java.util.Observer;import common.ChatIF;import ocsf.server.*;/** * This class overrides some of the methods in the abstract * superclass in order to give more functionality to the server. * * @author Dr Timothy C. Lethbridge * @author Dr Robert Lagani&egrave;re * @author Fran&ccedil;ois B&eacute;langer * @author Paul Holden * @version July 2000 */public class EchoServer implements Observer{  //Class variables *************************************************  ChatIF serverUI;  ObservableOriginatorServer obsOriServer;  //Constructors ****************************************************  /**   * Constructs an instance of the echo server.   *   * @param port The port number to connect on.   */  public EchoServer(int port, ChatIF ui)  {	this.obsOriServer = new ObservableOriginatorServer(port);	this.obsOriServer.addObserver(this);	this.serverUI = ui;  }  //Instance methods ************************************************  /**   * This method handles any messages received from the client.   *   * @param msg The message received from the client.   * @param client The connection from which the message originated.   */  public void handleMessageFromClient(Object msg,ConnectionToClient client){	//Verify if the client is logged in	if (isConnected(client)){		//If he want to login      if (msg.toString().startsWith("#login")){        try {            client.sendToClient("You already logged in.");        } catch (IOException e) {            throw new RuntimeException(e);        }      }	  else if (msg.equals("who")) { // Futur command        try {            client.sendToClient("Oups sorry this command isn't yet implemented");        } catch (IOException e) {            throw new RuntimeException(e);        }      }      else {        System.out.println("Message received: " + msg + " from " + client.getInfo("id"));        obsOriServer.sendToAllClients(client.getInfo("id") + ": " + msg);      }	}    else if (msg.toString().startsWith("#login")){        handleCommandLogin(client, msg.toString());    }	else {		try {		  client.sendToClient("You must log in first.");		  client.close();		} catch (IOException e) {		  throw new RuntimeException(e);		}  }  }  /**   * This method overrides the one in the superclass.  Called   * when the server starts listening for connections.   */  protected void serverStarted()  {	serverUI.display("Server listening for connections on port " + obsOriServer.getPort());	  ;  }  /**   * This method overrides the one in the superclass.  Called   * when the server stops listening for connections.   */  protected void serverStopped()  {	serverUI.display("Server has stopped listening for connections.");  }  protected void serverClosed(){	serverUI.display("Server closed.");  }  //Class methods ***************************************************  //Return if the client is connected  protected boolean isConnected(ConnectionToClient client){	return client.getInfo("id") != null;  }  protected void handleCommandLogin(ConnectionToClient client, String msg){	String[] splitMessage = msg.split(" +");	String id;	if (splitMessage.length == 1){	  id = "anonymous";	} else {	  id = splitMessage[1];	}	client.setInfo("id", id);  }  protected void clientConnected(ConnectionToClient client) {	serverUI.display("Client " + client + " connected");  }  protected synchronized void clientDisconnected(ConnectionToClient client) {	serverUI.display("A client disconnected");  }  protected synchronized void clientException(ConnectionToClient client) {	serverUI.display("Client "+ client +" has exception");  }  protected void handleCommandQuit(){	  System.exit(0);  }  protected void handleCommandClose(){	  try {		  obsOriServer.close();	  } catch (IOException e) {		  throw new RuntimeException(e);	  }  }  protected void handleCommandStart(){	  if (obsOriServer.isListening()){		  serverUI.display("Server already listening");		  return;	  }else {		  try {			  obsOriServer.listen();		  } catch (IOException e) {			  throw new RuntimeException(e);		  }	  }  }  protected void handleCommandStop(){	  obsOriServer.stopListening();  }  protected void handleCommandGetPort(){	  serverUI.display(Integer.toString(obsOriServer.getPort()));  }  protected void handleSetPort(String msg){	  if (obsOriServer.isListening()) {		  serverUI.display("You can not change port during listening");	  }	  else {		  String[] splitMessage = msg.split(" +");		  if (splitMessage.length != 2){			  serverUI.display("You must specify a port");			  return;		  }else if (!splitMessage[1].matches("\\d+")){			  serverUI.display("Port must be a number");			  return;		  }		  obsOriServer.setPort(Integer.parseInt(splitMessage[1]));		  serverUI.display("Port set up to : " + obsOriServer.getPort());	  }  }public void handleCommand(String message) {	switch (message) {		case "#quit":			handleCommandQuit();			break;		case "#close":			handleCommandClose();			break;		case "#stop":			handleCommandStop();			break;		case "#start":			handleCommandStart();			break;		case "#getport":			handleCommandGetPort();			break;		default:			if (message.startsWith("#setport")){				handleSetPort(message);			}else {				serverUI.display("Sorry, command unknown...");			}	}}  public boolean isCommand(String message){	return message.startsWith("#");  }  public void handleMessageFromServerUI(String message){	if (isCommand(message)){	  handleCommand(message);	} else {	  obsOriServer.sendToAllClients("Message from god : " + message);	}  }  @Override  public void update(Observable o, Object arg) {	OriginatorMessage originatorMessage = (OriginatorMessage) arg;	Object message = originatorMessage.getMessage();	ConnectionToClient client = originatorMessage.getOriginator();	if (message.toString().startsWith(ObservableServer.CLIENT_EXCEPTION)){	  clientException(client);	} else if (message.equals(ObservableServer.CLIENT_DISCONNECTED)){	  clientDisconnected(client);	} else if (message.equals(ObservableServer.CLIENT_CONNECTED)) {	  clientConnected(client);	} else if (message.equals(ObservableServer.SERVER_STARTED)) {	  serverStarted();	} else if (message.equals(ObservableServer.SERVER_STOPPED)) {	  serverStopped();	} else if (message.equals(ObservableServer.SERVER_CLOSED)) {	  serverClosed();	} else {	  handleMessageFromClient(message, client);	}  }}//End of server.EchoServer class